AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template ELBStickinessSample: Create a load balanced
  sample web site with ELB stickiness enabled. The AI is chosen based on the
  region in which the stack is run. This example creates 2 EC2 instances behind
  a load balancer with a simple health check. The ec2 instnces are untargeted
  and may be deployed in one or more availaiblity zones. The web site is
  available on port 80, however, the instances can be configured to listen on
  any port (8888 by default). **WARNING** This template creates one or more
  Amazon EC2 instances and an Application Load Balancer. You will be billed for
  the AWS resources used if you create a stack from this template.
Parameters:
  VpcId:
    Type: "AWS::EC2::VPC::Id"
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    Default: vpc-01eb23096fae50cbb

  # Subnets:
  #   Type: "List<AWS::EC2::Subnet::Id>"
  #   Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
  #   ConstraintDescription:
  #     - PublicSubnet1
  #     - PublicSubnet2

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: "AWS::EC2::KeyPair::KeyName"
    Default: key

Resources:
  ApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: Custom-ALB
      SecurityGroups: [!ImportValue SecurityGroupHTTP]
      Subnets:
        - !ImportValue PublicSubnet1
        - !ImportValue PublicSubnet2

  ALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: "80"
      Protocol: HTTP

  ALBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VpcId
      Targets:
        - Id: !ImportValue myEC2Instance1
          Port: 80
        - Id: !ImportValue myEC2Instance2
          Port: 80
      # TargetGroupAttributes:
      #   - Key: stickiness.enabled
      #     Value: "true"
      #   - Key: stickiness.type
      #     Value: lb_cookie
      #   - Key: stickiness.lb_cookie.duration_seconds
      #     Value: "180"

  # EC2Instance1:
  #   Type: "AWS::EC2::Instance"
  #   Metadata:
  #     Comment: Install a simple application
  #     "AWS::CloudFormation::Init":
  #       config:
  #         packages:
  #           yum:
  #             httpd: []
  #         files:
  #           /var/www/html/index.html:
  #             content: !Join
  #               - |+
  #               - - <img src="
  #                 - !FindInMap
  #                   - Region2Examples
  #                   - !Ref "AWS::Region"
  #                   - Examples
  #                 - /cloudformation_graphic.png" alt="AWS CloudFormation Logo"/>
  #                 - >-
  #                   <h1>Congratulations, you have successfully launched the AWS
  #                   CloudFormation sample.</h1>
  #             mode: "000644"
  #             owner: root
  #             group: root
  #           /etc/cfn/cfn-hup.conf:
  #             content: !Join
  #               - ""
  #               - - |
  #                   [main]
  #                 - stack=
  #                 - !Ref "AWS::StackId"
  #                 - |+
  #                 - region=
  #                 - !Ref "AWS::Region"
  #                 - |+
  #             mode: "000400"
  #             owner: root
  #             group: root
  #           /etc/cfn/hooks.d/cfn-auto-reloader.conf:
  #             content: !Join
  #               - ""
  #               - - |
  #                   [cfn-auto-reloader-hook]
  #                 - |
  #                   triggers=post.update
  #                 - >
  #                   path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
  #                 - "action=/opt/aws/bin/cfn-init -v "
  #                 - "         --stack "
  #                 - !Ref "AWS::StackName"
  #                 - "         --resource EC2Instance1 "
  #                 - "         --region "
  #                 - !Ref "AWS::Region"
  #                 - |+
  #                 - |
  #                   runas=root
  #             mode: "000400"
  #             owner: root
  #             group: root
  #         services:
  #           sysvinit:
  #             httpd:
  #               enabled: "true"
  #               ensureRunning: "true"
  #             cfn-hup:
  #               enabled: "true"
  #               ensureRunning: "true"
  #               files:
  #                 - /etc/cfn/cfn-hup.conf
  #                 - /etc/cfn/hooks.d/cfn-auto-reloader.conf
  #     # "AWS::CloudFormation::Designer":
  #     #   id: e43d0c1d-3cf3-4bf0-921c-2c1bd9a2574f
  #   Properties:
  #     SecurityGroups:
  #       - !Ref InstanceSecurityGroup
  #     KeyName: !Ref KeyName
  #     InstanceType: !Ref InstanceType
  #     ImageId: !FindInMap
  #       - AWSRegionArch2AMI
  #       - !Ref "AWS::Region"
  #       - !FindInMap
  #         - AWSInstanceType2Arch
  #         - !Ref InstanceType
  #         - Arch
  #     UserData: !Base64
  #       "Fn::Join":
  #         - ""
  #         - - |
  #             #!/bin/bash -xe
  #           - |
  #             yum update -y aws-cfn-bootstrap
  #           - "/opt/aws/bin/cfn-init -v "
  #           - "         --stack "
  #           - !Ref "AWS::StackName"
  #           - "         --resource EC2Instance1 "
  #           - "         --region "
  #           - !Ref "AWS::Region"
  #           - |+
  #           - "/opt/aws/bin/cfn-signal -e $? "
  #           - "         --stack "
  #           - !Ref "AWS::StackName"
  #           - "         --resource EC2Instance1 "
  #           - "         --region "
  #           - !Ref "AWS::Region"
  #           - |+
  #   CreationPolicy:
  #     ResourceSignal:
  #       Timeout: PT15M
  # EC2Instance2:
  #   Type: "AWS::EC2::Instance"
  #   Properties:
  #     SecurityGroups:
  #       - !Ref InstanceSecurityGroup
  #     KeyName: !Ref KeyName
  #     InstanceType: !Ref InstanceType
  #     ImageId: !FindInMap
  #       - AWSRegionArch2AMI
  #       - !Ref "AWS::Region"
  #       - !FindInMap
  #         - AWSInstanceType2Arch
  #         - !Ref InstanceType
  #         - Arch
  #     UserData: !Base64
  #       "Fn::Join":
  #         - ""
  #         - - |
  #             #!/bin/bash -xe
  #           - |
  #             yum update -y aws-cfn-bootstrap
  #           - "/opt/aws/bin/cfn-init -v "
  #           - "         --stack "
  #           - !Ref "AWS::StackName"
  #           - "         --resource EC2Instance1 "
  #           - "         --region "
  #           - !Ref "AWS::Region"
  #           - |+
  #           - "/opt/aws/bin/cfn-signal -e $? "
  #           - "         --stack "
  #           - !Ref "AWS::StackName"
  #           - "         --resource EC2Instance2 "
  #           - "         --region "
  #           - !Ref "AWS::Region"
  #           - |+
  #   CreationPolicy:
  #     ResourceSignal:
  #       Timeout: PT15M
  #   Metadata:
  #     "AWS::CloudFormation::Designer":
  #       id: 4fe8da8b-4f53-4a49-97f8-1cc2997d49ed
  # InstanceSecurityGroup:
  #   Type: "AWS::EC2::SecurityGroup"
  #   Properties:
  #     GroupDescription: Enable SSH access and HTTP access on the inbound port
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: "22"
  #         ToPort: "22"
  #         CidrIp: !Ref SSHLocation
  #       - IpProtocol: tcp
  #         FromPort: "80"
  #         ToPort: "80"
  #         CidrIp: 0.0.0.0/0
  #   Metadata:
  #     "AWS::CloudFormation::Designer":
  #       id: 317280e2-8810-4a15-adc2-5b0567a30944
Outputs:
  URL:
    Description: URL of the sample website
    Value: !Join
      - ""
      - - "http://"
        - !GetAtt
          - ApplicationLoadBalancer
          - DNSName
